<?php
namespace sdk;
use xmpush\Builder;
use xmpush\HttpBase;
use xmpush\Sender;
use xmpush\Constants;
use xmpush\Stats;
use xmpush\Tracer;
use xmpush\Feedback;
use xmpush\DevTools;
use xmpush\Subscription;
use xmpush\TargetedMessage;
use \think\Controller;
use \traits\controller\Jump;
include_once(dirname(__FILE__) . '/autoload.php');
$secret = 'akMGrQc21krlfq6G1N7aEA==';   //测试 sKfYL/bP/7VzmfQcy/hKuw==    正式 akMGrQc21krlfq6G1N7aEA==
$package = 'com.lezun.snowjun.bookstore';  //测试 com.jinjin.snowjun.playdemo 正式 com.lezun.snowjun.bookstore

// 常量设置必须在new Sender()方法之前调用
Constants::setPackage($package);
Constants::setSecret($secret);

class androidNotice
{
    public function sendAppNotice($title, $desc, $bookId = 0, $url = "", $alias = "")
    {
        $payload = '{"test":1,"ok":"It\'s a string"}';
        $sender = new Sender();
        $message = new Builder();
        $message->title($title);  // 通知栏的title
        $message->description($desc); // 通知栏的descption
        $message->passThrough(0);  // 这是一条通知栏消息，如果需要透传，把这个参数设置成1,同时去掉title和descption两个参数
        $message->payload($payload); // 携带的数据，点击后将会通过客户端的receiver中的onReceiveMessage方法传入。
        $message->extra(Builder::notifyForeground, 1); // 应用在前台是否展示通知，如果不希望应用在前台时候弹出通知，则设置这个参数为0
        $message->extra(Builder::bookId, $bookId); // 应用在前台是否展示通知，如果不希望应用在前台时候弹出通知，则设置这个参数为0
        if ($url) {
            $message->extra(Builder::url, $url); // 应用在前台是否展示通知，如果不希望应用在前台时候弹出通知，则设置这个参数为0
            $message->notifyId(2); // 通知类型。最多支持0-4 5个取值范围，同样的类型的通知会互相覆盖，不同类型可以在通知栏并存
        } else {
            $message->notifyId(0); // 通知类型。最多支持0-4 5个取值范围，同样的类型的通知会互相覆盖，不同类型可以在通知栏并存
        }

        $message->build();

        // 消息推送范围
        if (!empty($alias) || $alias != "") {
            if(is_array($alias)){
                //指定别名列表群发
                $num = count($alias);
                foreach($alias as $key =>$val){
                    if($key == ($num - 1)){
                        return $sender->broadcast($message, $val, 3); //根据topic, 发送消息到指定一组设备上
                    }
                    $sender->broadcast($message, $val, 3); //根据topic, 发送消息到指定一组设备上
                }
            } else {
                //指定别名单发
                $topic = $alias;
                return $sender->broadcast($message, $topic, 3); //根据topic, 发送消息到指定一组设备上
            }
        }
    }

    public function tracerInfo($id)
    {
        $tracer = new Tracer();
        $messageStatus = $tracer->getMessageStatusById($id,0);
        return $messageStatus;
    }
}

?>
